{
    "topics": [
      {
        "name": "Arrays",
        "questions": [
          { "id": "arr_q1",  "question": "Find two in an array that sum to a target.",                      "difficulty": "Easy",   "hint": "Use a HashMap for O(n) lookup." },
          { "id": "arr_q2",  "question": "Rotate an array by k steps.",                                            "difficulty": "Medium", "hint": "Think about reversing parts of the array." },
          { "id": "arr_q3",  "question": "Find the majority element (> n/2 occurrences).",                         "difficulty": "Easy",   "hint": "Moore’s voting algorithm works in one pass." },
          { "id": "arr_q4",  "question": "Find the second largest element in an array.",                           "difficulty": "Easy",   "hint": "Track two max values during one traversal." },
          { "id": "arr_q5",  "question": "Kadane’s algorithm for maximum subarray sum.",                           "difficulty": "Easy",   "hint": "Maintain current and global best sums." },
          { "id": "arr_q6",  "question": "Minimum swaps required to sort a binary array.",                         "difficulty": "Medium", "hint": "Greedy counting of misplaced 0s and 1s." },
          { "id": "arr_q7",  "question": "Merge two sorted arrays without extra space.",                           "difficulty": "Hard",   "hint": "Use the GAP method to compare distant elements." },
          { "id": "arr_q8",  "question": "Find missing and repeating number in 1‒n array.",                        "difficulty": "Medium", "hint": "Use XOR or indexing sign marking." },
          { "id": "arr_q9",  "question": "Product of array except self.",                                          "difficulty": "Medium", "hint": "Maintain prefix and suffix products." },
          { "id": "arr_q10", "question": "Sort an array of 0s, 1s and 2s.",                                        "difficulty": "Easy",   "hint": "Dutch National Flag three-pointer approach." },
          { "id": "arr_q11", "question": "Minimum number of jumps to reach array end.",                            "difficulty": "Medium", "hint": "Greedy ladder + stairs technique." },
          { "id": "arr_q12", "question": "Merge overlapping intervals.",                                           "difficulty": "Medium", "hint": "Sort by start time then sweep once." },
          { "id": "arr_q13", "question": "Find kth smallest element (quickselect).",                               "difficulty": "Medium", "hint": "Partition logic of quicksort works." },
          { "id": "arr_q14", "question": "Subarray with given sum (positive integers).",                           "difficulty": "Easy",   "hint": "Sliding window grows and shrinks." },
          { "id": "arr_q15", "question": "Subarray with given sum (may contain negatives).",                       "difficulty": "Medium", "hint": "Store prefix sums in HashMap." },
          { "id": "arr_q16", "question": "Find pair with minimum absolute difference.",                            "difficulty": "Easy",   "hint": "Sort first, then scan adjacent pairs." },
          { "id": "arr_q17", "question": "Given stock prices, maximize profit with one transaction.",              "difficulty": "Easy",   "hint": "Track min price so far and max profit." },
          { "id": "arr_q18", "question": "Maximize profit with unlimited transactions.",                           "difficulty": "Easy",   "hint": "Sum every rising edge difference." },
          { "id": "arr_q19", "question": "Trap rain water.",                                                       "difficulty": "Medium", "hint": "Maintain leftMax and rightMax bars." },
          { "id": "arr_q20", "question": "Next permutation of an array.",                                          "difficulty": "Medium", "hint": "Find first decreasing element from right." },
          { "id": "arr_q21", "question": "Longest mountain subarray.",                                             "difficulty": "Medium", "hint": "Two-pass slopes counting left and right." },
          { "id": "arr_q22", "question": "Count inversions in an array.",                                          "difficulty": "Hard",   "hint": "Modify merge sort and count cross pairs." },
          { "id": "arr_q23", "question": "Find minimum number of swaps to sort.",                                  "difficulty": "Medium", "hint": "Think in terms of permutation cycles." },
          { "id": "arr_q24", "question": "Smallest missing positive integer.",                                     "difficulty": "Medium", "hint": "Place each value at index value-1 in O(1) extra space." },
          { "id": "arr_q25", "question": "Check if array is a palindrome after one swap.",                         "difficulty": "Easy",   "hint": "Count mismatches; at most two indices allowed." },
          { "id": "arr_q26", "question": "Longest subarray with equal number of 0s and 1s.",                       "difficulty": "Medium", "hint": "Treat 0 as −1 and use prefix sum map." },
          { "id": "arr_q27", "question": "Minimum length subarray with sum ≥ target.",                             "difficulty": "Medium", "hint": "Sliding window with front pointer." },
          { "id": "arr_q28", "question": "Game of life one update step.",                                          "difficulty": "Medium", "hint": "Encode next state in unused bits." },
          { "id": "arr_q29", "question": "Find all leaders in an array.",                                          "difficulty": "Easy",   "hint": "Traverse from right tracking max so far." },
          { "id": "arr_q30", "question": "Find equilibrium index where left sum = right sum.",                     "difficulty": "Easy",   "hint": "Total sum then running left sum." },
          { "id": "arr_q31", "question": "Check if array can be divided into pairs with equal sum.",               "difficulty": "Medium", "hint": "Count complements in HashMap." },
          { "id": "arr_q32", "question": "Find longest consecutive elements sequence.",                            "difficulty": "Medium", "hint": "Put numbers in HashSet, start only from roots." },
          { "id": "arr_q33", "question": "Rearrange array alternately high low.",                                  "difficulty": "Medium", "hint": "Use two indexes and encode values in one slot." },
          { "id": "arr_q34", "question": "Next greater element for each element.",                                 "difficulty": "Medium", "hint": "Use monotonically decreasing stack." },
          { "id": "arr_q35", "question": "Find minimum element in rotated sorted array.",                          "difficulty": "Easy",   "hint": "Binary search on pivot." },
          { "id": "arr_q36", "question": "Search target in rotated sorted array.",                                 "difficulty": "Medium", "hint": "Identify sorted half at each binary step." },
          { "id": "arr_q37", "question": "Find duplicate number in array of n+1 numbers (1..n).",                  "difficulty": "Medium", "hint": "Floyd cycle detection in value graph." },
          { "id": "arr_q38", "question": "Minimum operations to reduce x to zero from ends of array.",             "difficulty": "Medium", "hint": "Transform to longest subarray sum problem." },
          { "id": "arr_q39", "question": "Count subarrays product less than k.",                                   "difficulty": "Medium", "hint": "Sliding window multiplies until >k." },
          { "id": "arr_q40", "question": "Split array into two parts with minimal largest sum (m partitions).",    "difficulty": "Hard",   "hint": "Binary search on answer space + greedy check." },
          { "id": "arr_q41", "question": "Find peak element greater than neighbors.",                              "difficulty": "Easy",   "hint": "Binary search on rising slope." },
          { "id": "arr_q42", "question": "Check if array is bitonic.",                                             "difficulty": "Easy",   "hint": "Find single peak then verify monotonic halves." },
          { "id": "arr_q43", "question": "Find smallest range covering one element from each of k lists.",         "difficulty": "Hard",   "hint": "Use min-heap with current max tracking." },
          { "id": "arr_q44", "question": "Circular tour gas station problem.",                                     "difficulty": "Medium", "hint": "Greedy accumulate deficit and reset start." },
          { "id": "arr_q45", "question": "Reconstruct original array from prefix-xor array.",                      "difficulty": "Easy",   "hint": "a[i] = pref[i] XOR pref[i-1]." },
          { "id": "arr_q46", "question": "Find smallest subarray with equal 0s, 1s and 2s.",                       "difficulty": "Hard",   "hint": "Hash (c1-c0, c2-c1) prefix pairs." },
          { "id": "arr_q47", "question": "Split array into three parts with equal sum.",                            "difficulty": "Easy",   "hint": "Check cumulative sum positions of target." },
          { "id": "arr_q48", "question": "Minimum moves to equalize array elements.",                              "difficulty": "Medium", "hint": "Moves = sum - n*min element." },
          { "id": "arr_q49", "question": "Wiggle sort array in-place.",                                            "difficulty": "Medium", "hint": "Three-way partition around median then interleave." },
          { "id": "arr_q50", "question": "Compute running median of stream.",                                      "difficulty": "Hard",   "hint": "Two heaps (max left, min right) balance sizes." }
        ]
      },
  
      {
        "name": "Linked List",
        "questions": [
          { "id": "ll_q1",  "question": "Check if a linked list has a cycle.",                        "difficulty": "Medium", "hint": "Use Floyd’s cycle detection (tortoise and hare)." },
          { "id": "ll_q2",  "question": "Reverse a linked list.",                                     "difficulty": "Easy",   "hint": "Iterate with three pointers: prev, curr, next." },
          { "id": "ll_q3",  "question": "Find the middle node of a linked list.",                     "difficulty": "Easy",   "hint": "Move slow by one and fast by two nodes." },
          { "id": "ll_q4",  "question": "Remove nth node from end of list.",                          "difficulty": "Medium", "hint": "Advance first pointer n steps ahead." },
          { "id": "ll_q5",  "question": "Merge two sorted linked lists.",                             "difficulty": "Easy",   "hint": "Dummy head and compare nodes iteratively." },
          { "id": "ll_q6",  "question": "Add two numbers represented by linked lists.",               "difficulty": "Medium", "hint": "Simulate digit-wise addition with carry." },
          { "id": "ll_q7",  "question": "Palindrome linked list check.",                              "difficulty": "Medium", "hint": "Reverse second half then compare halves." },
          { "id": "ll_q8",  "question": "Detect and remove cycle in linked list.",                    "difficulty": "Medium", "hint": "Find meeting point then move pointers to locate start." },
          { "id": "ll_q9",  "question": "Flatten a multilevel linked list.",                          "difficulty": "Hard",   "hint": "Depth-first merge child lists into next pointers." },
          { "id": "ll_q10", "question": "Reorder list to L1→Ln→L2→Ln-1 …",                            "difficulty": "Medium", "hint": "Find middle, reverse second half, merge alternately." },
          { "id": "ll_q11", "question": "Rotate list right by k places.",                             "difficulty": "Medium", "hint": "Connect tail to head then break at new tail." },
          { "id": "ll_q12", "question": "Swap nodes in pairs.",                                       "difficulty": "Easy",   "hint": "Iterate swapping pointers in groups of two." },
          { "id": "ll_q13", "question": "Delete a node given only that node reference.",              "difficulty": "Easy",   "hint": "Copy data from next node then bypass it." },
          { "id": "ll_q14", "question": "Partition list around value x.",                             "difficulty": "Medium", "hint": "Create before and after dummy lists then connect." },
          { "id": "ll_q15", "question": "Sort a linked list in O(n log n) time and O(1) space.",      "difficulty": "Hard",   "hint": "Bottom-up merge sort using length doubling." },
          { "id": "ll_q16", "question": "Reverse nodes in k-group.",                                  "difficulty": "Hard",   "hint": "Iteratively reverse each k-length block." },
          { "id": "ll_q17", "question": "Copy list with random pointer.",                             "difficulty": "Hard",   "hint": "Interleave cloned nodes then detach." },
          { "id": "ll_q18", "question": "Remove duplicates from sorted list.",                        "difficulty": "Easy",   "hint": "Skip nodes with equal values." },
          { "id": "ll_q19", "question": "Remove all duplicates (leave no copies).",                   "difficulty": "Medium", "hint": "Dummy head and skip groups of equal nodes." },
          { "id": "ll_q20", "question": "Add one to a number represented as linked list.",            "difficulty": "Easy",   "hint": "Reverse, add carry, reverse back." },
          { "id": "ll_q21", "question": "Pairwise swap nodes by changing links only.",                "difficulty": "Medium", "hint": "Recursive swapping returns new head of pair." },
          { "id": "ll_q22", "question": "Find intersection point of two linked lists.",               "difficulty": "Easy",   "hint": "Traverse heads switching lists to sync lengths." },
          { "id": "ll_q23", "question": "Delete node with given key in O(1) for singly list.",        "difficulty": "Medium", "hint": "Copy data from next except when key at tail." },
          { "id": "ll_q24", "question": "Segregate even and odd nodes preserving order.",             "difficulty": "Medium", "hint": "Maintain separate even and odd lists." },
          { "id": "ll_q25", "question": "Reverse alternate k nodes in list.",                         "difficulty": "Hard",   "hint": "Recursive reversal skipping next k nodes." },
          { "id": "ll_q26", "question": "Detect intersection of two cycle lists.",                    "difficulty": "Hard",   "hint": "Cases: disjoint, shared cycle, etc." },
          { "id": "ll_q27", "question": "Swap kth node from beginning and end.",                      "difficulty": "Medium", "hint": "Find kth and (n-k+1)th nodes, swap data or links." },
          { "id": "ll_q28", "question": "Insert node in sorted circular linked list.",                "difficulty": "Easy",   "hint": "Traverse until correct position wraps." },
          { "id": "ll_q29", "question": "Convert binary represented list to integer.",                "difficulty": "Easy",   "hint": "Accum = accum*2 + node.val." },
          { "id": "ll_q30", "question": "Find length of loop in linked list.",                        "difficulty": "Medium", "hint": "After meeting, count nodes until meet again." },
          { "id": "ll_q31", "question": "LRU cache with O(1) get and put.",                           "difficulty": "Hard",   "hint": "Use hashmap + doubly linked list." },
          { "id": "ll_q32", "question": "Flatten a binary tree to linked list (preorder).",           "difficulty": "Medium", "hint": "Reverse preorder, track previous node." },
          { "id": "ll_q33", "question": "Reverse list between positions m and n.",                    "difficulty": "Medium", "hint": "Iterative one-pass reversal within window." },
          { "id": "ll_q34", "question": "Multiply two numbers represented by linked lists.",          "difficulty": "Hard",   "hint": "Convert to numbers or simulate grade-school multiplication." },
          { "id": "ll_q35", "question": "Merge k sorted linked lists.",                               "difficulty": "Hard",   "hint": "Min-heap of current heads or divide-and-conquer." }
        ]
      },
  
      {
        "name": "Strings",
        "questions": [
          { "id": "str_q1",  "question": "Check if two strings are anagrams.",                          "difficulty": "Easy",   "hint": "Sort both or count 26 letter frequencies." },
          { "id": "str_q2",  "question": "Reverse words in a sentence.",                                "difficulty": "Easy",   "hint": "Reverse entire string then each word." },
          { "id": "str_q3",  "question": "Longest substring without repeating characters.",             "difficulty": "Medium", "hint": "Sliding window with map of last seen indices." },
          { "id": "str_q4",  "question": "Implement wildcard pattern matching ? and *.",                "difficulty": "Hard",   "hint": "DP with memo on indices or greedy backtracking." },
          { "id": "str_q5",  "question": "Convert Roman numeral to integer.",                           "difficulty": "Easy",   "hint": "Subtract when smaller preceding bigger." },
          { "id": "str_q6",  "question": "Longest palindromic substring.",                              "difficulty": "Medium", "hint": "Expand around center O(n²) or Manacher O(n)." },
          { "id": "str_q7",  "question": "Z-algorithm / prefix function of string.",                    "difficulty": "Medium", "hint": "Maintain [l,r] Z-box while scanning." },
          { "id": "str_q8",  "question": "Find first non-repeating character.",                         "difficulty": "Easy",   "hint": "Count array then second pass find count==1." },
          { "id": "str_q9",  "question": "Check if string is rotation of another.",                     "difficulty": "Easy",   "hint": "Concatenate s1 with itself and search s2." },
          { "id": "str_q10", "question": "Generate n-bit Gray codes.",                                  "difficulty": "Medium", "hint": "Reflect-and-prefix recursion." },
          { "id": "str_q11", "question": "Encode and decode strings list (LeetCode 271).",             "difficulty": "Medium", "hint": "Length prefix with delimiter." },
          { "id": "str_q12", "question": "Edit distance (Levenshtein).",                                "difficulty": "Medium", "hint": "DP table of size (m+1)(n+1)." },
          { "id": "str_q13", "question": "String to integer (atoi).",                                   "difficulty": "Medium", "hint": "Handle whitespace, sign, overflow." },
          { "id": "str_q14", "question": "Group anagrams.",                                             "difficulty": "Easy",   "hint": "Key by sorted letters or 26-count tuple." },
          { "id": "str_q15", "question": "Minimum window substring containing pattern.",               "difficulty": "Hard",   "hint": "Sliding window with need & have counts." },
          { "id": "str_q16", "question": "Longest common prefix among array of strings.",               "difficulty": "Easy",   "hint": "Compare characters column-wise until mismatch." },
          { "id": "str_q17", "question": "Count and say sequence generation.",                          "difficulty": "Easy",   "hint": "Read off contiguous groups of same digit." },
          { "id": "str_q18", "question": "Basic string compression (run length).",                      "difficulty": "Easy",   "hint": "Build new string with char and count." },
          { "id": "str_q19", "question": "Check inclusion of permutation of pattern in string.",        "difficulty": "Medium", "hint": "Sliding window of length len(p) with counts diff." },
          { "id": "str_q20", "question": "Find smallest substring containing all distinct chars.",      "difficulty": "Medium", "hint": "Similar to minimum window but use total unique count." },
          { "id": "str_q21", "question": "Integer to English words conversion.",                        "difficulty": "Hard",   "hint": "Divide into billions, millions, thousands chunks." },
          { "id": "str_q22", "question": "Implement strStr (KMP).",                                     "difficulty": "Medium", "hint": "Compute prefix array then scan." },
          { "id": "str_q23", "question": "Decode string with nested counts e.g. 3[a2[c]] -> accaccacc.","difficulty": "Medium", "hint": "Use stack for numbers and strings." },
          { "id": "str_q24", "question": "Check if string is a valid palindrome (ignore non-alphanum).", "difficulty": "Easy",   "hint": "Two pointers move inward skipping non-letters." },
          { "id": "str_q25", "question": "Remove minimum parentheses to make valid string.",            "difficulty": "Medium", "hint": "Stack indices of unmatched '(' then build result." },
          { "id": "str_q26", "question": "Find longest repeating non-overlapping substring.",           "difficulty": "Hard",   "hint": "Suffix array + LCP or DP suffix comparisons." },
          { "id": "str_q27", "question": "Word break string into dictionary words.",                    "difficulty": "Medium", "hint": "DP boolean array on valid breaks." },
          { "id": "str_q28", "question": "Palindrome partitioning into all possibilities.",             "difficulty": "Medium", "hint": "Backtracking with DP palindrome cache." },
          { "id": "str_q29", "question": "Alien dictionary (topological order).",                       "difficulty": "Hard",   "hint": "Build graph of letter precedence then BFS topo sort." },
          { "id": "str_q30", "question": "Check if one edit away (insert/delete/replace).",             "difficulty": "Easy",   "hint": "Compare lengths and walk pointers allowing mismatch." }
        ]
      },
  
      {
        "name": "Stacks & Queues",
        "questions": [
          { "id": "sq_q1",  "question": "Implement a stack using two queues.",                            "difficulty": "Easy",   "hint": "Push costly or pop costly variations." },
          { "id": "sq_q2",  "question": "Implement a queue using two stacks.",                            "difficulty": "Easy",   "hint": "Push to in-stack, pop from out-stack when empty transfer." },
          { "id": "sq_q3",  "question": "Design a stack supporting getMin in O(1).",                     "difficulty": "Easy",   "hint": "Maintain auxiliary min stack." },
          { "id": "sq_q4",  "question": "Evaluate reverse Polish notation.",                              "difficulty": "Easy",   "hint": "Use stack for operands and operators." },
          { "id": "sq_q5",  "question": "Daily temperatures next warmer day.",                            "difficulty": "Medium", "hint": "Monotonic decreasing stack of indices." },
          { "id": "sq_q6",  "question": "Largest rectangle in histogram.",                                "difficulty": "Hard",   "hint": "Stack of increasing bar indices calculates area." },
          { "id": "sq_q7",  "question": "Implement bounded circular deque.",                              "difficulty": "Medium", "hint": "Use doubly linked nodes or circular array." },
          { "id": "sq_q8",  "question": "Simplify Unix style path.",                                      "difficulty": "Easy",   "hint": "Split on '/', stack for segments, ignore '.' and pop '..'." },
          { "id": "sq_q9",  "question": "Decode string with nested brackets using stacks.",               "difficulty": "Medium", "hint": "Keep stack of strings and counts like 3[a2[c]]." },
          { "id": "sq_q10", "question": "Asteroid collision using stacks.",                               "difficulty": "Medium", "hint": "Compare top of stack with current asteroid." },
          { "id": "sq_q11", "question": "Sliding window maximum.",                                        "difficulty": "Hard",   "hint": "Deque storing indices of decreasing values." },
          { "id": "sq_q12", "question": "Implement k stacks in a single array.",                          "difficulty": "Hard",   "hint": "Use next array and top array free list scheme." },
          { "id": "sq_q13", "question": "Number of visible people in a queue (monotonic).",               "difficulty": "Medium", "hint": "Stack counts until taller person appears." },
          { "id": "sq_q14", "question": "Remove k digits to get smallest number.",                        "difficulty": "Medium", "hint": "Greedy stack removing larger previous digits." },
          { "id": "sq_q15", "question": "Next greater element in circular array.",                        "difficulty": "Medium", "hint": "Traverse twice using stack." },
          { "id": "sq_q16", "question": "Maximum frequency stack.",                                       "difficulty": "Hard",   "hint": "Map freq to stack, track maxFreq." },
          { "id": "sq_q17", "question": "Basic calculator with parentheses.",                             "difficulty": "Medium", "hint": "Stacks for numbers and operators evaluate precedence." },
          { "id": "sq_q18", "question": "Celebrity problem using stack.",                                 "difficulty": "Easy",   "hint": "Pop two, discard non-celebrity; verify candidate." },
          { "id": "sq_q19", "question": "Implement queue with O(1) amortized operations using array.",    "difficulty": "Easy",   "hint": "Use head and tail pointers modulo size." },
          { "id": "sq_q20", "question": "Minimum add to make parentheses valid.",                         "difficulty": "Easy",   "hint": "Count balance or push unmatched '(' onto stack." },
          { "id": "sq_q21", "question": "Remove duplicate letters for smallest lexicographic order.",     "difficulty": "Hard",   "hint": "Stack + last index tracking + inStack set." },
          { "id": "sq_q22", "question": "Longest valid parentheses substring.",                           "difficulty": "Hard",   "hint": "Stack of indices or leftBalance counters." },
          { "id": "sq_q23", "question": "341. Flatten nested list iterator.",                             "difficulty": "Medium", "hint": "Stack of iterators / list indices." },
          { "id": "sq_q24", "question": "Implement animal shelter queue (cats and dogs).",                "difficulty": "Easy",   "hint": "Timestamp animals; maintain two queues." },
          { "id": "sq_q25", "question": "Decode parentheses string score.",                               "difficulty": "Easy",   "hint": "Score grows 2*inner or 1 when '()'." }
        ]
      },
  
      {
        "name": "Binary Trees",
        "questions": [
          { "id": "bt_q1",  "question": "Perform inorder, preorder, postorder traversals iteratively.",      "difficulty": "Easy",   "hint": "Use stack(s) to simulate recursion." },
          { "id": "bt_q2",  "question": "Level order traversal of binary tree.",                             "difficulty": "Easy",   "hint": "Queue BFS each level count." },
          { "id": "bt_q3",  "question": "Right view of binary tree.",                                        "difficulty": "Easy",   "hint": "Track last node at each level BFS." },
          { "id": "bt_q4",  "question": "Height / maximum depth of binary tree.",                            "difficulty": "Easy",   "hint": "Recursive max(left,right)+1." },
          { "id": "bt_q5",  "question": "Check if binary tree is symmetric.",                                "difficulty": "Easy",   "hint": "Compare mirrored subtrees recursively." },
          { "id": "bt_q6",  "question": "Lowest common ancestor of two nodes.",                              "difficulty": "Medium", "hint": "DFS returns node or null from children." },
          { "id": "bt_q7",  "question": "Serialize and deserialize binary tree.",                            "difficulty": "Hard",   "hint": "Preorder with null markers; rebuild recursively." },
          { "id": "bt_q8",  "question": "Construct tree from inorder and preorder arrays.",                  "difficulty": "Medium", "hint": "Root at preorder[preIdx], split inorder." },
          { "id": "bt_q9",  "question": "Diameter (longest path) of binary tree.",                           "difficulty": "Medium", "hint": "Compute height and track max path length." },
          { "id": "bt_q10", "question": "Convert binary tree to doubly linked list (inorder).",              "difficulty": "Medium", "hint": "Carry prev pointer across recursion." },
          { "id": "bt_q11", "question": "Maximum path sum between any two nodes.",                           "difficulty": "Hard",   "hint": "Postorder returning max gain from child." },
          { "id": "bt_q12", "question": "Check if tree is height balanced.",                                 "difficulty": "Easy",   "hint": "Return height or -1 sentinel on imbalance." },
          { "id": "bt_q13", "question": "Populate next right pointers in each node.",                        "difficulty": "Medium", "hint": "O(1) space using previously established next level." },
          { "id": "bt_q14", "question": "Validate if binary tree is a BST.",                                 "difficulty": "Easy",   "hint": "Pass down min/max permissible bounds." },
          { "id": "bt_q15", "question": "Binary tree vertical order traversal.",                             "difficulty": "Medium", "hint": "BFS with column index map list." },
          { "id": "bt_q16", "question": "Zigzag level order traversal.",                                     "difficulty": "Medium", "hint": "Alternate direction each level." },
          { "id": "bt_q17", "question": "Sum root-to-leaf numbers.",                                         "difficulty": "Easy",   "hint": "Carry path value times 10 plus node val." },
          { "id": "bt_q18", "question": "Count nodes in complete binary tree in O(log² n).",                 "difficulty": "Hard",   "hint": "Compare depths of leftmost and rightmost paths." },
          { "id": "bt_q19", "question": "Find duplicate subtrees.",                                          "difficulty": "Hard",   "hint": "Serialize each subtree and use hash count." },
          { "id": "bt_q20", "question": "Print boundary of binary tree.",                                    "difficulty": "Medium", "hint": "Left boundary, leaves, right boundary reverse." },
          { "id": "bt_q21", "question": "Path sum exists equal to target.",                                  "difficulty": "Easy",   "hint": "DFS subtract node value from sum at each step." },
          { "id": "bt_q22", "question": "All root-to-leaf paths sum to target.",                             "difficulty": "Medium", "hint": "Backtrack list of path values." },
          { "id": "bt_q23", "question": "Time to burn entire binary tree from a node.",                      "difficulty": "Hard",   "hint": "Map parent pointers then BFS outward." },
          { "id": "bt_q24", "question": "Recover wrongly swapped nodes in BST.",                             "difficulty": "Hard",   "hint": "Inorder detects two misplaced values." },
          { "id": "bt_q25", "question": "Count good nodes on root-to-node path.",                            "difficulty": "Easy",   "hint": "Maintain max so far along path." }
        ]
      },
  
      {
        "name": "Binary Search Trees",
        "questions": [
          { "id": "bst_q1",  "question": "Insert a value into a BST.",                                   "difficulty": "Easy",   "hint": "Iterate until null and attach new node." },
          { "id": "bst_q2",  "question": "Delete a node from BST.",                                      "difficulty": "Medium", "hint": "Replace with inorder successor/predecessor." },
          { "id": "bst_q3",  "question": "Find kth smallest element in BST.",                            "difficulty": "Easy",   "hint": "Inorder traversal counting nodes." },
          { "id": "bst_q4",  "question": "Validate preorder sequence of BST.",                           "difficulty": "Hard",   "hint": "Use stack with allowable min values." },
          { "id": "bst_q5",  "question": "Convert sorted array to height balanced BST.",                 "difficulty": "Easy",   "hint": "Recursively pick mid as root." },
          { "id": "bst_q6",  "question": "Find closest value to target.",                                "difficulty": "Easy",   "hint": "Binary search keeping best diff." },
          { "id": "bst_q7",  "question": "Serialize and deserialize BST exploiting ordering.",           "difficulty": "Medium", "hint": "Preorder list + min/max reconstruction." },
          { "id": "bst_q8",  "question": "Two sum BSTs: pair with sum from two trees.",                  "difficulty": "Medium", "hint": "Inorder + hashset of needed complements." },
          { "id": "bst_q9",  "question": "Convert BST to greater sum tree.",                             "difficulty": "Easy",   "hint": "Reverse inorder accumulating running sum." },
          { "id": "bst_q10", "question": "Lowest common ancestor in BST.",                               "difficulty": "Easy",   "hint": "Traverse down choosing side by value." },
          { "id": "bst_q11", "question": "Recover BST postorder sequence validation.",                   "difficulty": "Hard",   "hint": "Recursive bounds splitting last part." },
          { "id": "bst_q12", "question": "Tree iterator (next/hasNext) O(h) memory.",                    "difficulty": "Medium", "hint": "Stack of left path nodes." },
          { "id": "bst_q13", "question": "Find minimum absolute difference between any two nodes.",      "difficulty": "Easy",   "hint": "Inorder track previous node value." },
          { "id": "bst_q14", "question": "Find mode(s) in BST with duplicates.",                         "difficulty": "Easy",   "hint": "Inorder counting current streak and max." },
          { "id": "bst_q15", "question": "Convert sorted linked list to balanced BST.",                  "difficulty": "Medium", "hint": "Simulate inorder using slow-fast to pick mid." }
        ]
      },
  
      {
        "name": "Graphs",
        "questions": [
          { "id": "gr_q1",  "question": "Depth-first search traversal.",                                 "difficulty": "Easy",   "hint": "Recursive or stack implementation visited set." },
          { "id": "gr_q2",  "question": "Breadth-first search traversal.",                               "difficulty": "Easy",   "hint": "Queue for level order visiting." },
          { "id": "gr_q3",  "question": "Detect cycle in undirected graph.",                             "difficulty": "Medium", "hint": "DFS parent tracking or DSU." },
          { "id": "gr_q4",  "question": "Detect cycle in directed graph.",                               "difficulty": "Medium", "hint": "DFS color state visited/recStack." },
          { "id": "gr_q5",  "question": "Topological sort of DAG.",                                      "difficulty": "Medium", "hint": "Kahn’s BFS indegree queue or DFS stack." },
          { "id": "gr_q6",  "question": "Number of connected components in graph.",                      "difficulty": "Easy",   "hint": "Run DFS/BFS from unvisited nodes." },
          { "id": "gr_q7",  "question": "Shortest path in unweighted graph.",                            "difficulty": "Easy",   "hint": "Standard BFS distance array." },
          { "id": "gr_q8",  "question": "Dijkstra’s shortest path algorithm.",                           "difficulty": "Medium", "hint": "Min-heap priority queue relax edges." },
          { "id": "gr_q9",  "question": "Bellman-Ford negative edge detection.",                         "difficulty": "Medium", "hint": "Relax edges n-1 times then detect change." },
          { "id": "gr_q10", "question": "Detect negative cycle using Floyd-Warshall.",                   "difficulty": "Hard",   "hint": "Check diagonal entries after updates." },
          { "id": "gr_q11", "question": "Minimum spanning tree using Kruskal.",                          "difficulty": "Medium", "hint": "Sort edges and union-find merging." },
          { "id": "gr_q12", "question": "Prim’s algorithm MST using heap.",                              "difficulty": "Medium", "hint": "Add cheapest edge to growing tree." },
          { "id": "gr_q13", "question": "Clone an undirected graph.",                                    "difficulty": "Medium", "hint": "HashMap original->clone BFS." },
          { "id": "gr_q14", "question": "Course schedule feasibility (cycle).",                          "difficulty": "Easy",   "hint": "Topo sort indegrees zero queue." },
          { "id": "gr_q15", "question": "Course schedule order (topo).",                                 "difficulty": "Medium", "hint": "Return topo ordering list or empty." },
          { "id": "gr_q16", "question": "Number of islands in grid.",                                    "difficulty": "Easy",   "hint": "DFS/BFS flood fill mark visited." },
          { "id": "gr_q17", "question": "Friend circles / provinces count.",                             "difficulty": "Easy",   "hint": "DFS adjacency matrix or DSU." },
          { "id": "gr_q18", "question": "Word ladder shortest transformation length.",                   "difficulty": "Hard",   "hint": "Bidirectional BFS on generic patterns." },
          { "id": "gr_q19", "question": "Word ladder II all shortest sequences.",                        "difficulty": "Hard",   "hint": "BFS then DFS backtracking build paths." },
          { "id": "gr_q20", "question": "Snakes and ladders minimum dice throws.",                       "difficulty": "Medium", "hint": "BFS on board positions with edges." },
          { "id": "gr_q21", "question": "Network delay time (single source to all).",                    "difficulty": "Medium", "hint": "Dijkstra from source node." },
          { "id": "gr_q22", "question": "Redundant connection edge that creates cycle.",                 "difficulty": "Easy",   "hint": "Union-find while iterating edges." },
          { "id": "gr_q23", "question": "Cheapest flight within K stops.",                               "difficulty": "Medium", "hint": "Modified Dijkstra with (node, stops) state." },
          { "id": "gr_q24", "question": "Find eventual safe nodes (no cycles).",                         "difficulty": "Medium", "hint": "Reverse graph topo sort of outdegree 0 nodes." },
          { "id": "gr_q25", "question": "Critical connections / bridges in network.",                    "difficulty": "Hard",   "hint": "Tarjan DFS low-link time algorithm." }
        ]
      },
  
      {
        "name": "Dynamic Programming",
        "questions": [
          { "id": "dp_q1",  "question": "Nth Fibonacci number using DP.",                                    "difficulty": "Easy",   "hint": "Store previously computed values." },
          { "id": "dp_q2",  "question": "0/1 Knapsack problem.",                                             "difficulty": "Hard",   "hint": "DP table of items vs capacity." },
          { "id": "dp_q3",  "question": "Longest common subsequence (LCS).",                                 "difficulty": "Medium", "hint": "dp[i][j] from previous diagonal." },
          { "id": "dp_q4",  "question": "Minimum edits (edit distance).",                                    "difficulty": "Medium", "hint": "Insert, delete, replace cost matrix." },
          { "id": "dp_q5",  "question": "Coin change minimum coins.",                                        "difficulty": "Medium", "hint": "dp[amount] = 1 + min(dp[amount-coin])." },
          { "id": "dp_q6",  "question": "Coin change number of ways.",                                       "difficulty": "Medium", "hint": "Unbounded knapsack order of loops coin first." },
          { "id": "dp_q7",  "question": "House robber non-adjacent max sum.",                                "difficulty": "Easy",   "hint": "dp[i] = max(dp[i-1], dp[i-2]+nums[i])." },
          { "id": "dp_q8",  "question": "House robber II circular street.",                                  "difficulty": "Medium", "hint": "Rob houses excluding first or last." },
          { "id": "dp_q9",  "question": "Maximum product subarray.",                                         "difficulty": "Medium", "hint": "Track max and min ending here due to negatives." },
          { "id": "dp_q10", "question": "Longest increasing subsequence (LIS).",                             "difficulty": "Medium", "hint": "dp[i] = 1+max(dp[j]) for j<i and a[j]<a[i]." },
          { "id": "dp_q11", "question": "LIS O(n log n) patience piles.",                                    "difficulty": "Hard",   "hint": "Binary search tails array." },
          { "id": "dp_q12", "question": "Partition equal subset sum.",                                       "difficulty": "Medium", "hint": "Subset sum boolean DP half total." },
          { "id": "dp_q13", "question": "Target sum number of ways assign ± signs.",                         "difficulty": "Medium", "hint": "Transform to subset sum count." },
          { "id": "dp_q14", "question": "Unique paths in m x n grid.",                                       "difficulty": "Easy",   "hint": "dp[i][j] = dp[i-1][j]+dp[i][j-1]." },
          { "id": "dp_q15", "question": "Unique paths with obstacles.",                                      "difficulty": "Medium", "hint": "Set dp cell to 0 if obstacle encountered." },
          { "id": "dp_q16", "question": "Min cost climbing stairs.",                                         "difficulty": "Easy",   "hint": "dp[i] = cost[i]+min(dp[i-1],dp[i-2])." },
          { "id": "dp_q17", "question": "Matrix chain multiplication.",                                      "difficulty": "Hard",   "hint": "dp[i][j] = min over k of cost splits." },
          { "id": "dp_q18", "question": "Burst balloons for max coins.",                                     "difficulty": "Hard",   "hint": "Interval DP on last balloon burst." },
          { "id": "dp_q19", "question": "Scramble string equivalence.",                                      "difficulty": "Hard",   "hint": "Memoize on substring pairs swap splits." },
          { "id": "dp_q20", "question": "Word break count ways.",                                            "difficulty": "Medium", "hint": "dp[i] sum dp[j] for each word ending i." },
          { "id": "dp_q21", "question": "Longest palindromic subsequence.",                                  "difficulty": "Medium", "hint": "dp[l][r]=2+dp[l+1][r-1] if equal." },
          { "id": "dp_q22", "question": "Min insertions to form palindrome.",                                "difficulty": "Medium", "hint": "TotalLen - LPS." },
          { "id": "dp_q23", "question": "Count distinct subsequences of s equal t.",                         "difficulty": "Hard",   "hint": "dp[i][j] if chars match add both choices." },
          { "id": "dp_q24", "question": "Decode ways of digit string.",                                      "difficulty": "Medium", "hint": "dp[i] from single and double digit decode." },
          { "id": "dp_q25", "question": "Wildcard matching '?' '*' pattern.",                                "difficulty": "Hard",   "hint": "Bottom-up DP with pattern and text indices." },
          { "id": "dp_q26", "question": "Maximum sum rectangle no larger than k.",                            "difficulty": "Hard",   "hint": "Compress columns then max subarray ≤k via BST." },
          { "id": "dp_q27", "question": "Minimum palindrome partition cuts.",                                "difficulty": "Hard",   "hint": "DP storing palindrome table and min cuts." },
          { "id": "dp_q28", "question": "Min number of coins infinite supply to make value.",                "difficulty": "Medium", "hint": "Classic coin change DP." },
          { "id": "dp_q29", "question": "Rod cutting maximum revenue.",                                      "difficulty": "Medium", "hint": "Unbounded knapsack on lengths." },
          { "id": "dp_q30", "question": "Boolean parenthesization count ways.",                              "difficulty": "Hard",   "hint": "dp[i][j][bool] using operator partitions." }
        ]
      },
  
      {
        "name": "Greedy",
        "questions": [
          { "id": "grd_q1",  "question": "Activity selection maximum non-overlapping meetings.",                 "difficulty": "Easy",   "hint": "Sort by finish time and pick first compatible." },
          { "id": "grd_q2",  "question": "Fractional knapsack maximize value.",                                  "difficulty": "Easy",   "hint": "Sort by value/weight ratio take until full." },
          { "id": "grd_q3",  "question": "Minimum number of platforms for trains.",                              "difficulty": "Medium", "hint": "Sort arrivals and departures two pointers." },
          { "id": "grd_q4",  "question": "Huffman coding optimal merge pattern.",                                "difficulty": "Medium", "hint": "Combine two least frequent weights using min-heap." },
          { "id": "grd_q5",  "question": "Gas station circular tour feasibility.",                               "difficulty": "Medium", "hint": "Greedy start where cumulative sum lowest." },
          { "id": "grd_q6",  "question": "Jump game can reach end.",                                             "difficulty": "Easy",   "hint": "Maintain farthest reachable index." },
          { "id": "grd_q7",  "question": "Jump game II minimum jumps.",                                          "difficulty": "Medium", "hint": "Greedy layers of reachable range." },
          { "id": "grd_q8",  "question": "Assign cookies to children maximize content children.",                "difficulty": "Easy",   "hint": "Sort greed factors and cookies sizes." },
          { "id": "grd_q9",  "question": "Queue reconstruction by height.",                                      "difficulty": "Medium", "hint": "Sort by height desc, k asc insert at k." },
          { "id": "grd_q10", "question": "Reorganize string no adjacent equal letters.",                          "difficulty": "Medium", "hint": "Max-heap of counts pick top two each turn." },
          { "id": "grd_q11", "question": "Minimum arrows to burst balloons.",                                    "difficulty": "Medium", "hint": "Sort intervals by end, shoot arrow when needed." },
          { "id": "grd_q12", "question": "Erase overlap intervals minimum removals.",                            "difficulty": "Medium", "hint": "Similar to activity selection keep earliest finishing." },
          { "id": "grd_q13", "question": "Task scheduler minimum intervals.",                                    "difficulty": "Medium", "hint": "Count max frequency tasks and formula idle slots." },
          { "id": "grd_q14", "question": "Can place flowers non-adjacent.",                                      "difficulty": "Easy",   "hint": "Greedy check neighbors insert flower." },
          { "id": "grd_q15", "question": "Partition labels to maximize chunk sizes.",                             "difficulty": "Easy",   "hint": "Track last occurrence of each letter." },
          { "id": "grd_q16", "question": "Minimize cost to connect sticks.",                                     "difficulty": "Medium", "hint": "Always combine two smallest lengths (heap)." },
          { "id": "grd_q17", "question": "Candy distribution according to ratings.",                             "difficulty": "Hard",   "hint": "Two pass left-right candies count." },
          { "id": "grd_q18", "question": "Minimum coin change (canonical coin system).",                         "difficulty": "Easy",   "hint": "Take largest coin ≤ amount greedily." },
          { "id": "grd_q19", "question": "IPO max profit with at most k projects.",                               "difficulty": "Hard",   "hint": "Greedy choose highest profit available using two heaps." },
          { "id": "grd_q20", "question": "Remove k digits to make smallest number.",                              "difficulty": "Medium", "hint": "Greedy stack remove larger previous digits." }
        ]
      },
  
      {
        "name": "Recursion & Backtracking",
        "questions": [
          { "id": "rb_q1",  "question": "Generate all subsets (power set) of a set.",                        "difficulty": "Easy",   "hint": "Recursive inclusion/exclusion of each element." },
          { "id": "rb_q2",  "question": "Generate all permutations of an array.",                            "difficulty": "Easy",   "hint": "Swap current index with each subsequent index recursively." },
          { "id": "rb_q3",  "question": "Print all combinations of balanced parentheses of n pairs.",       "difficulty": "Medium", "hint": "Backtrack adding '(' if open<n, ')' if close<open." },
          { "id": "rb_q4",  "question": "Solve N-Queens puzzle.",                                            "difficulty": "Hard",   "hint": "Place queen column by column checking diagonal conflicts." },
          { "id": "rb_q5",  "question": "Word search in grid path exists.",                                  "difficulty": "Medium", "hint": "DFS backtrack marking visited letter cells." },
          { "id": "rb_q6",  "question": "Rat in a maze print all paths.",                                    "difficulty": "Easy",   "hint": "Backtrack moving UDLR within bounds & unvisited." },
          { "id": "rb_q7",  "question": "Count number of ways to tile 2×n board with 2×1 dominoes.",        "difficulty": "Easy",   "hint": "Recursive f(n)=f(n-1)+f(n-2) like Fibonacci." },
          { "id": "rb_q8",  "question": "Sudoku solver backtracking.",                                       "difficulty": "Hard",   "hint": "Try digits 1-9 satisfying row/col/box constraints." },
          { "id": "rb_q9",  "question": "Partition string into palindromic substrings.",                     "difficulty": "Medium", "hint": "Backtrack building list, check palindrome on the fly." },
          { "id": "rb_q10", "question": "Combinations sum candidates unlimited use.",                        "difficulty": "Medium", "hint": "Backtrack choose current index or move next." },
          { "id": "rb_q11", "question": "Combination sum II no reuse duplicates unique combinations.",       "difficulty": "Medium", "hint": "Sort then skip same elements index duplicates." },
          { "id": "rb_q12", "question": "Letter combinations of a phone number.",                            "difficulty": "Easy",   "hint": "Backtrack appending letters mapped to digits." },
          { "id": "rb_q13", "question": "Generate gray code sequence of n bits.",                            "difficulty": "Easy",   "hint": "Reflect & prefix method recursion." },
          { "id": "rb_q14", "question": "Generate all subsets that sum to target (subset sum).",             "difficulty": "Medium", "hint": "Backtrack accumulate current sum prune >target." },
          { "id": "rb_q15", "question": "Print all Hamiltonian paths in graph.",                             "difficulty": "Hard",   "hint": "Backtrack marking visited vertices path length." },
          { "id": "rb_q16", "question": "Knight’s tour covering all squares.",                               "difficulty": "Hard",   "hint": "Warnsdorff heuristic optional but pure backtracking." },
          { "id": "rb_q17", "question": "Generate derangements of n elements.",                              "difficulty": "Medium", "hint": "Backtrack avoiding fixed positions." },
          { "id": "rb_q18", "question": "Generate all binary strings without consecutive 1s.",               "difficulty": "Medium", "hint": "Track previous bit while building string." },
          { "id": "rb_q19", "question": "Restore valid IP addresses from string.",                           "difficulty": "Medium", "hint": "Choose dot positions ensuring 0-255 segments." },
          { "id": "rb_q20", "question": "Solve word search II (dictionary) using Trie + DFS.",              "difficulty": "Hard",   "hint": "Backtrack DFS pruning using Trie node children." }
        ]
      },
  
      {
        "name": "Bit Manipulation",
        "questions": [
          { "id": "bit_q1",  "question": "Count set bits in an integer.",                                   "difficulty": "Easy",   "hint": "Brian-Kernighan trick n &= n-1 each iteration." },
          { "id": "bit_q2",  "question": "Determine if integer is power of two.",                            "difficulty": "Easy",   "hint": "n>0 and n&(n-1)==0." },
          { "id": "bit_q3",  "question": "Reverse bits of 32-bit unsigned integer.",                        "difficulty": "Medium", "hint": "Swap bit groups or loop shifting result." },
          { "id": "bit_q4",  "question": "Find single number when every other appears twice.",              "difficulty": "Easy",   "hint": "XOR of all elements." },
          { "id": "bit_q5",  "question": "Find two unique numbers when others appear twice.",              "difficulty": "Medium", "hint": "XOR all then isolate rightmost set bit." },
          { "id": "bit_q6",  "question": "Single number when others appear thrice.",                       "difficulty": "Hard",   "hint": "Sum bits mod 3 method per bit position." },
          { "id": "bit_q7",  "question": "Add two integers without using '+' operator.",                    "difficulty": "Easy",   "hint": "Use XOR for sum and AND<<1 for carry." },
          { "id": "bit_q8",  "question": "Calculate submask enumeration of bitmask.",                      "difficulty": "Medium", "hint": "for(sub=S; sub; sub=(sub-1)&S)." },
          { "id": "bit_q9",  "question": "Swap two numbers without temp variable.",                        "difficulty": "Easy",   "hint": "Use XOR swap x^=y; y^=x; x^=y." },
          { "id": "bit_q10", "question": "Count bits 1..n (DP solution).",                                 "difficulty": "Medium", "hint": "dp[i] = dp[i & (i-1)] + 1." },
          { "id": "bit_q11", "question": "Maximum XOR of two numbers in array.",                           "difficulty": "Hard",   "hint": "Trie of bits build prefix candidates Greedy bits." },
          { "id": "bit_q12", "question": "Find position of rightmost set bit.",                             "difficulty": "Easy",   "hint": "n & -n isolates lowest set bit." },
          { "id": "bit_q13", "question": "Compute XOR of numbers from a to b.",                             "difficulty": "Medium", "hint": "Prefix XOR pattern repeats every 4." },
          { "id": "bit_q14", "question": "Gray code to binary conversion.",                                 "difficulty": "Easy",   "hint": "Iteratively xor shifted versions." },
          { "id": "bit_q15", "question": "Divide two integers without *, /, %.",                           "difficulty": "Hard",   "hint": "Bit-shift divisor left until ≤ dividend subtract accumulate." },
          { "id": "bit_q16", "question": "Find lonely pixel toggled exactly once in matrix.",               "difficulty": "Medium", "hint": "Use XOR per row+col." },
          { "id": "bit_q17", "question": "Generate nth magic number (powers of 5) via bits.",              "difficulty": "Medium", "hint": "For each set bit add 5^position to sum." },
          { "id": "bit_q18", "question": "Count total set bits from 1 to n.",                               "difficulty": "Hard",   "hint": "Recursive highest power of 2 approach." },
          { "id": "bit_q19", "question": "Minimum flips to convert a to b.",                               "difficulty": "Easy",   "hint": "Count set bits in a XOR b." },
          { "id": "bit_q20", "question": "Number of bits to convert integer A to B.",                      "difficulty": "Easy",   "hint": "Same as previous; XOR then count." }
        ]
      },
  
      {
        "name": "Hashing",
        "questions": [
          { "id": "hash_q1",  "question": "Two sum using hash map.",                                       "difficulty": "Easy",   "hint": "Store complement → index mapping." },
          { "id": "hash_q2",  "question": "Longest consecutive sequence.",                                 "difficulty": "Medium", "hint": "Set only expand from sequence starts." },
          { "id": "hash_q3",  "question": "Subarray sum equals k.",                                        "difficulty": "Medium", "hint": "Prefix sum frequency map counts pairs." },
          { "id": "hash_q4",  "question": "Detect duplicates within k distance.",                          "difficulty": "Easy",   "hint": "Maintain sliding window set size k." },
          { "id": "hash_q5",  "question": "Find top k frequent elements.",                                 "difficulty": "Medium", "hint": "Frequency map then bucket sort or heap." },
          { "id": "hash_q6",  "question": "Group shifted strings.",                                        "difficulty": "Medium", "hint": "Key by differences pattern modulo 26." },
          { "id": "hash_q7",  "question": "Minimum window substring of s containing t (hash counts).",     "difficulty": "Hard",   "hint": "Maintain need map diffCount." },
          { "id": "hash_q8",  "question": "Find longest subarray with equal 0s and 1s.",                   "difficulty": "Medium", "hint": "Running diff count as key in map." },
          { "id": "hash_q9",  "question": "Find array of indices forming word pairs in list.",             "difficulty": "Hard",   "hint": "Hash map reversed string + palindromic prefix." },
          { "id": "hash_q10", "question": "Check if array can be reordered doubles.",                      "difficulty": "Medium", "hint": "Count map sorted by abs value ensure halves." },
          { "id": "hash_q11", "question": "Randomized set O(1) insert delete getRandom.",                  "difficulty": "Medium", "hint": "Hash map value → index plus dynamic array." },
          { "id": "hash_q12", "question": "Isomorphic strings mapping.",                                   "difficulty": "Easy",   "hint": "Map char→char both directions check consistency." },
          { "id": "hash_q13", "question": "Check if ransom note can be constructed from magazine.",        "difficulty": "Easy",   "hint": "Count chars of magazine then deduct." },
          { "id": "hash_q14", "question": "Concatenated words find all made by other words.",              "difficulty": "Hard",   "hint": "DFS memo with dictionary set of words." },
          { "id": "hash_q15", "question": "Smallest subarray with all occurrences of most frequent element.","difficulty": "Medium","hint": "Store first, last index and count of each value." }
        ]
      },
  
      {
        "name": "Heap / Priority Queue",
        "questions": [
          { "id": "heap_q1",  "question": "Implement min heap insert and extractMin.",                      "difficulty": "Easy",   "hint": "Binary array tree adjust up/down." },
          { "id": "heap_q2",  "question": "Find k largest elements in array.",                              "difficulty": "Easy",   "hint": "Min heap size k after adding each element." },
          { "id": "heap_q3",  "question": "Merge k sorted arrays.",                                         "difficulty": "Medium", "hint": "Min heap of next elements per array." },
          { "id": "heap_q4",  "question": "Find median from data stream.",                                  "difficulty": "Hard",   "hint": "Two heaps maxLeft and minRight balance sizes." },
          { "id": "heap_q5",  "question": "Rearrange string k distance apart.",                             "difficulty": "Hard",   "hint": "Max heap on counts with queue of cooldown." },
          { "id": "heap_q6",  "question": "Minimum cost to connect ropes.",                                 "difficulty": "Easy",   "hint": "Sum of two smallest repeatedly using min heap." },
          { "id": "heap_q7",  "question": "K closest points to origin.",                                    "difficulty": "Easy",   "hint": "Max heap of size k store distance." },
          { "id": "heap_q8",  "question": "Find kth smallest element in sorted matrix.",                    "difficulty": "Medium", "hint": "Min heap push next element in row." },
          { "id": "heap_q9",  "question": "Path with minimum effort in grid (Dijkstra).",                   "difficulty": "Hard",   "hint": "Heap of cells keyed by max edge so far." },
          { "id": "heap_q10", "question": "IPO maximize capital given profits and capitals.",               "difficulty": "Hard",   "hint": "Sort by capital, max heap of prof ≤ W." },
          { "id": "heap_q11", "question": "Top k frequent words by frequency then lexicographic.",          "difficulty": "Medium", "hint": "Min heap with custom comparator size k." },
          { "id": "heap_q12", "question": "Sliding window median.",                                         "difficulty": "Hard",   "hint": "Two heaps with lazy deletion maps." },
          { "id": "heap_q13", "question": "Swap nodes in linked list in pairs using heap of nodes indexes.","difficulty": "Medium", "hint": "Not typical; treat reorder indices." },
          { "id": "heap_q14", "question": "Minimum running range covering elements from k lists.",          "difficulty": "Hard",   "hint": "Heap stores current min, track current max." },
          { "id": "heap_q15", "question": "Design Twitter feed getNewsFeed.",                               "difficulty": "Hard",   "hint": "Merge k tweet lists using max heap by time." }
        ]
      },
  
      {
        "name": "Searching & Sorting",
        "questions": [
          { "id": "ss_q1",  "question": "Binary search standard iterative.",                               "difficulty": "Easy",   "hint": "low, high mid update until found." },
          { "id": "ss_q2",  "question": "Find first and last occurrence of target.",                       "difficulty": "Easy",   "hint": "Modified binary search for boundaries." },
          { "id": "ss_q3",  "question": "Square root of integer using binary search.",                     "difficulty": "Easy",   "hint": "Search answer range 0..n." },
          { "id": "ss_q4",  "question": "Search in infinite sorted array.",                                "difficulty": "Medium", "hint": "Exponential window expand then binary search." },
          { "id": "ss_q5",  "question": "Find kth smallest pair distance.",                               "difficulty": "Hard",   "hint": "Binary search on distance with sliding count." },
          { "id": "ss_q6",  "question": "Find duplicate in sorted array by binary search on value count.", "difficulty": "Hard",   "hint": "Count ≤ mid gives pigeonhole direction." },
          { "id": "ss_q7",  "question": "Count number of reverse pairs (inversions) mergeSort.",           "difficulty": "Hard",   "hint": "During merge count greater elements on left." },
          { "id": "ss_q8",  "question": "Quick sort algorithm in-place.",                                  "difficulty": "Medium", "hint": "Partition pivot then recursive sorts." },
          { "id": "ss_q9",  "question": "Sort an array of 0s,1s,2s Dutch flag.",                           "difficulty": "Easy",   "hint": "Pointers low mid high scanning." },
          { "id": "ss_q10", "question": "Counting sort algorithm explanation.",                            "difficulty": "Easy",   "hint": "Frequency array then prefix sum." },
          { "id": "ss_q11", "question": "Topological sort Kahn algorithm explained.",                      "difficulty": "Medium", "hint": "Queue of indegree 0 nodes, repeated removal." },
          { "id": "ss_q12", "question": "Sort characters by frequency.",                                   "difficulty": "Medium", "hint": "Bucket sort counts to string builder." },
          { "id": "ss_q13", "question": "Median of two sorted arrays.",                                    "difficulty": "Hard",   "hint": "Binary search partition smaller array." },
          { "id": "ss_q14", "question": "Find smallest positive missing number using sorting trick.",      "difficulty": "Medium", "hint": "Place each positive at index value-1." },
          { "id": "ss_q15", "question": "Search element in bitonic array.",                                "difficulty": "Medium", "hint": "Find peak then binary search halves." }
        ]
      },
  
      {
        "name": "Matrix",
        "questions": [
          { "id": "mat_q1",  "question": "Search element in row-wise and column-wise sorted matrix.",     "difficulty": "Easy",   "hint": "Start from top-right move left/down." },
          { "id": "mat_q2",  "question": "Spiral order traversal of matrix.",                             "difficulty": "Easy",   "hint": "Maintain four boundaries shrink after printing." },
          { "id": "mat_q3",  "question": "Rotate NxN matrix by 90° clockwise in-place.",                  "difficulty": "Medium", "hint": "Transpose then reverse each row." },
          { "id": "mat_q4",  "question": "Set matrix zeroes rows & cols containing zero.",                "difficulty": "Medium", "hint": "Use first row/col as flags boolean." },
          { "id": "mat_q5",  "question": "Find median in row-wise sorted matrix.",                        "difficulty": "Hard",   "hint": "Binary search on value range use upper_bound count." },
          { "id": "mat_q6",  "question": "Boolean matrix problem set rows/cols to 1 if cell is 1.",       "difficulty": "Medium", "hint": "Flags row0 col0 then second pass." },
          { "id": "mat_q7",  "question": "Print matrix in diagonal zigzag order.",                        "difficulty": "Medium", "hint": "Sum of indices parity decides direction." },
          { "id": "mat_q8",  "question": "Search a 2D matrix fashion like 1-D sorted.",                   "difficulty": "Easy",   "hint": "Binary search index mapping to row,col." },
          { "id": "mat_q9",  "question": "Find kth smallest element in sorted matrix.",                   "difficulty": "Medium", "hint": "Min heap push row heads or binary search counts." },
          { "id": "mat_q10", "question": "Shortest path in binary matrix 8-move BFS.",                    "difficulty": "Medium", "hint": "Queue store (r,c,dist); mark visited." },
          { "id": "mat_q11", "question": "Number of islands (again grid).",                               "difficulty": "Easy",   "hint": "DFS/Union-find mark land visited." },
          { "id": "mat_q12", "question": "Minimum path sum in grid.",                                     "difficulty": "Medium", "hint": "DP bottom-up accumulate min cost." },
          { "id": "mat_q13", "question": "Unique paths with obstacles grid DP.",                          "difficulty": "Medium", "hint": "dp[i][j]=0 for obstacle else sum top left." },
          { "id": "mat_q14", "question": "Flood fill replace color in image.",                             "difficulty": "Easy",   "hint": "DFS/BFS propagate oldColor to newColor." },
          { "id": "mat_q15", "question": "Maximum size square sub-matrix of 1s.",                         "difficulty": "Medium", "hint": "DP of size min( left, above, diag ) + 1." },
          { "id": "mat_q16", "question": "Rotate matrix by 180° without extra space.",                    "difficulty": "Medium", "hint": "Reverse rows then reverse columns." },
          { "id": "mat_q17", "question": "Find row with maximum 1s in binary matrix.",                    "difficulty": "Easy",   "hint": "Binary search first 1 then minimal index row." },
          { "id": "mat_q18", "question": "Sudoku solver using backtracking.",                             "difficulty": "Hard",   "hint": "Try digits 1-9 if constraints satisfy recursion." },
          { "id": "mat_q19", "question": "Count square sub-matrices with all ones.",                      "difficulty": "Medium", "hint": "DP accumulate squares size counts." },
          { "id": "mat_q20", "question": "Game of life board update in-place.",                           "difficulty": "Medium", "hint": "Store next state in 2 LSB bits then shift." }
        ]
      },
  
      {
        "name": "Trie",
        "questions": [
          { "id": "tr_q1",  "question": "Implement Trie insert, search, startsWith.",                    "difficulty": "Easy",   "hint": "Each node 26 child pointers + end flag." },
          { "id": "tr_q2",  "question": "Word search II using Trie in board.",                           "difficulty": "Hard",   "hint": "DFS backtrack with Trie pruning." },
          { "id": "tr_q3",  "question": "Design add and search words with '.' wildcard.",                "difficulty": "Medium", "hint": "DFS through Trie for '.' branches." },
          { "id": "tr_q4",  "question": "Implement prefix based phone directory suggestions.",           "difficulty": "Medium", "hint": "Store list of top K words at Trie nodes." },
          { "id": "tr_q5",  "question": "Replace words in sentence by shortest dictionary root.",       "difficulty": "Easy",   "hint": "Traverse Trie until terminal root." },
          { "id": "tr_q6",  "question": "Maximum XOR of two numbers using bitwise Trie.",               "difficulty": "Hard",   "hint": "Walk greedy opposite bit at each level." },
          { "id": "tr_q7",  "question": "Count distinct substrings of string using suffix Trie.",        "difficulty": "Hard",   "hint": "Insert all suffixes count nodes." },
          { "id": "tr_q8",  "question": "Find shortest unique prefix for each word.",                   "difficulty": "Medium", "hint": "Store frequency count at each node." },
          { "id": "tr_q9",  "question": "Auto complete system design using Trie + PQ.",                 "difficulty": "Hard",   "hint": "Maintain frequency and sentences list at nodes." },
          { "id": "tr_q10", "question": "Implement magic dictionary one edit distance search.",         "difficulty": "Medium", "hint": "DFS allowing at most one mismatch flag." }
        ]
      },
  
      {
        "name": "Math & Number Theory",
        "questions": [
          { "id": "math_q1",  "question": "Sieve of Eratosthenes generate primes ≤ n.",                "difficulty": "Easy",   "hint": "Mark multiples starting from p²." },
          { "id": "math_q2",  "question": "Greatest common divisor (Euclid).",                         "difficulty": "Easy",   "hint": "Iterative a%=b until zero." },
          { "id": "math_q3",  "question": "LCM of two numbers using GCD.",                             "difficulty": "Easy",   "hint": "a/gcd*a*b may overflow; use division first." },
          { "id": "math_q4",  "question": "Modular exponentiation fast power.",                        "difficulty": "Medium", "hint": "Exponentiation by squaring log n." },
          { "id": "math_q5",  "question": "Count trailing zeros in factorial.",                        "difficulty": "Easy",   "hint": "Sum ⌊n/5⌋+⌊n/25⌋… powers of 5." },
          { "id": "math_q6",  "question": "Check if number is prime (6k±1 test).",                     "difficulty": "Easy",   "hint": "Check divisibility up to sqrt(n)." },
          { "id": "math_q7",  "question": "Compute nCr modulo a prime.",                               "difficulty": "Hard",   "hint": "Precompute factorial and inverse mod prime." },
          { "id": "math_q8",  "question": "Chinese remainder theorem solve system of congruences.",    "difficulty": "Hard",   "hint": "Compute mod inverse for each modulus." },
          { "id": "math_q9",  "question": "Detect power of three without loop.",                       "difficulty": "Easy",   "hint": "Check 3^19 % n ==0 for 32-bit." },
          { "id": "math_q10", "question": "Count digits in factorial big numbers (Kamenetsky).",       "difficulty": "Medium", "hint": "Use logarithms sum formula." }
        ]
      },
  
      {
        "name": "Two Pointers & Sliding Window",
        "questions": [
          { "id": "tp_q1",  "question": "Remove duplicates from sorted array in-place.",                "difficulty": "Easy",   "hint": "Slow pointer tracks unique, fast scans list." },
          { "id": "tp_q2",  "question": "Move zeros to end maintaining order.",                        "difficulty": "Easy",   "hint": "Swap non-zeros with front pointer." },
          { "id": "tp_q3",  "question": "Sorted squares of sorted array.",                             "difficulty": "Easy",   "hint": "Two pointers from ends fill result backwards." },
          { "id": "tp_q4",  "question": "Container with most water.",                                  "difficulty": "Medium", "hint": "Two pointers inward, track max area." },
          { "id": "tp_q5",  "question": "3Sum zero triplets.",                                         "difficulty": "Medium", "hint": "Sort then two-pointer search pairs for each index." },
          { "id": "tp_q6",  "question": "4Sum target quadruplets.",                                    "difficulty": "Hard",   "hint": "Sort, nested loops fix two, two-pointer pairs." },
          { "id": "tp_q7",  "question": "Minimum size subarray sum ≥ target.",                         "difficulty": "Medium", "hint": "Sliding window shrink when sum≥target." },
          { "id": "tp_q8",  "question": "Find longest substring with at most k distinct characters.",  "difficulty": "Medium", "hint": "Sliding window map char counts shrink when >k." },
          { "id": "tp_q9",  "question": "Check permutation in string sliding window.",                 "difficulty": "Medium", "hint": "Window of pattern length maintain count diff==0." },
          { "id": "tp_q10", "question": "Longest repeating character after k replacements.",           "difficulty": "Medium", "hint": "Window size - maxFreq > k shrink window." }
        ]
      },
  
      {
        "name": "Union-Find / Disjoint Set",
        "questions": [
          { "id": "dsu_q1",  "question": "Implement union-find with path compression and union by rank.",   "difficulty": "Easy",   "hint": "Parent array and size/rank array." },
          { "id": "dsu_q2",  "question": "Number of connected components in graph using DSU.",             "difficulty": "Easy",   "hint": "Initialize n sets merge edges." },
          { "id": "dsu_q3",  "question": "Redundant connection extra edge causing cycle.",                 "difficulty": "Easy",   "hint": "Union edges until find already connected pair." },
          { "id": "dsu_q4",  "question": "Accounts merge using email similarity.",                         "difficulty": "Medium", "hint": "Map email to user id union accounts." },
          { "id": "dsu_q5",  "question": "Evaluate equations division queries using union-find ratios.",   "difficulty": "Hard",   "hint": "Store parent and ratio weight to parent." },
          { "id": "dsu_q6",  "question": "Minimum cost to connect all cities.",                            "difficulty": "Medium", "hint": "Kruskal MST with DSU." },
          { "id": "dsu_q7",  "question": "Swim in rising water minimum time path.",                        "difficulty": "Hard",   "hint": "Union cells ≤t until start-end connected." },
          { "id": "dsu_q8",  "question": "Number of friend circles merge groups.",                         "difficulty": "Easy",   "hint": "Union 1s in adjacency matrix." },
          { "id": "dsu_q9",  "question": "Smallest string with swaps allowed pairs.",                      "difficulty": "Medium", "hint": "Union index sets then sort their chars." },
          { "id": "dsu_q10", "question": "Regions cut by slashes count in grid.",                          "difficulty": "Hard",   "hint": "Union sub-triangles each cell detect cycle." }
        ]
      }
    ]
  }
  